
// This tells TypeScript that JSZip is available globally, attached to the window object by the CDN script.
declare const JSZip: any;

const FAVICON_SIZES = [
  { size: 16, name: "favicon-16x16.png" },
  { size: 32, name: "favicon-32x32.png" },
  { size: 180, name: "apple-touch-icon.png" },
  { size: 192, name: "android-chrome-192x192.png" },
  { size: 512, name: "android-chrome-512x512.png" },
];

/**
 * Resizes a base64 encoded image to a specific size.
 * @param base64Str The base64 string of the source image.
 * @param size The target width and height.
 * @returns A promise that resolves with a Blob of the resized PNG image.
 */
const resizeImage = (base64Str: string, size: number): Promise<Blob> => {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.src = `data:image/png;base64,${base64Str}`;
    img.onload = () => {
      const canvas = document.createElement("canvas");
      canvas.width = size;
      canvas.height = size;
      const ctx = canvas.getContext("2d");
      if (!ctx) {
        return reject(new Error("Could not get canvas context"));
      }
      ctx.drawImage(img, 0, 0, size, size);
      canvas.toBlob((blob) => {
        if (blob) {
          resolve(blob);
        } else {
          reject(new Error("Canvas to Blob conversion failed"));
        }
      }, "image/png");
    };
    img.onerror = (error) => {
      reject(error);
    };
  });
};

/**
 * Creates the content for the site.webmanifest file.
 */
const createManifestContent = (): string => {
  const manifest = {
    name: "My App",
    short_name: "App",
    icons: [
      {
        src: "/android-chrome-192x192.png",
        sizes: "192x192",
        type: "image/png",
      },
      {
        src: "/android-chrome-512x512.png",
        sizes: "512x512",
        type: "image/png",
      },
    ],
    theme_color: "#ffffff",
    background_color: "#ffffff",
    display: "standalone",
  };
  return JSON.stringify(manifest, null, 2);
};

/**
 * Returns the HTML snippet for embedding the favicons.
 * @returns An HTML string.
 */
export const getHtmlSnippet = (): string => {
  return `<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
<link rel="manifest" href="/site.webmanifest">`;
};

/**
 * Generates a ZIP file containing all necessary favicon assets.
 * @param base64Image The base64 string of the master icon image.
 * @returns A promise that resolves with the generated ZIP file as a Blob.
 */
export const createFaviconZip = async (base64Image: string): Promise<Blob> => {
  const zip = new JSZip();

  // Generate all PNG sizes
  for (const { size, name } of FAVICON_SIZES) {
    const imageBlob = await resizeImage(base64Image, size);
    zip.file(name, imageBlob);
  }

  // Add manifest file
  const manifestContent = createManifestContent();
  zip.file("site.webmanifest", manifestContent);
  
  // Add a simple README
  const readmeContent = `Favicon Package Generated by AI Favicon Generator

Your package includes:
- favicon-16x16.png: For browser tabs.
- favicon-32x32.png: For browser tabs (higher resolution).
- apple-touch-icon.png: For iOS home screens.
- android-chrome-192x192.png: For Android devices.
- android-chrome-512x512.png: For Android devices (higher resolution).
- site.webmanifest: For PWA and modern browser integration.

How to use:
1. Unzip this package.
2. Place all files in the root directory of your website.
3. Add the following lines to the <head> of your HTML files:

${getHtmlSnippet()}
`;
  zip.file("README.md", readmeContent);


  // Generate the ZIP file
  const zipBlob = await zip.generateAsync({ type: "blob" });
  return zipBlob;
};
